# Python implementation for Kruskal's algorithm (2025-04-19)
def find(v):    # find set of vertex i
    while parent[v] != v:
        v = parent[v]
    return v
# union of i and j when they are in disjoint sets
def union(u, v):
    p = find(u)
    q = find(v)
    parent[p] = q
V = 5  
edge_cost = [(0,1,2),(0,3,6),(1,2,3),(1,3,8),(1,4,5),(2,4,7)]
edge_cost= sorted(edge_cost, key=lambda d:d[2]) 
parent = [i for i in range(V)]  # Initialize disjoint sets
mincost = 0
# add minimum weight edges one by one
for edge_count in range(V-1) :
    while True :
        (i,j,k) = edge_cost.pop(0)
        if find(i) != find(j) :
            a, b, min = i, j, k
            union(a, b)
            print('Edge {}:({}, {}) cost:{}'.format(edge_count+1, a, b, min))
            break
    mincost += min
print("Minimum cost= {}".format(mincost))
