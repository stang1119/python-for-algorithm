INF=9999
C=\
[[INF, INF, 13, INF, 16, INF], 
[INF, INF, INF,  6, INF, 10], 
[INF, INF, INF, 14, INF, 11], 
[INF, INF, INF, INF,  5, 17], 
[INF, INF,  9, INF, INF,  7], 
[INF, 10, INF, INF, INF, INF]]
n=len(C)
P=[0]*n  # parent node
V=[0,1,2,3,4,5]  # vertex set 
root=0       # root vertex
V.remove(root)
D=C[root]  # initial distance
VMS=V[:]  # candidate vertex set
for i in V:  
    min_c=INF
    for k in VMS:
        if D[k] < min_c:
            v=k
            min_c=D[k]
    VMS.remove(v)  # remove v from VMS
    for k in VMS:  
        if D[k] > D[v]+C[v][k]: 
            D[k]=D[v]+C[v][k]
            P[k]=v  # record v as the parent node
# output paths 
for i in V:
    print("D[%d]=%d  %d<-" %(i,D[i],i), end='')
    j=P[i]
    while j != 0:
        print("%d<-" %j, end='') 
        j=P[j]
    print(root) # the root
